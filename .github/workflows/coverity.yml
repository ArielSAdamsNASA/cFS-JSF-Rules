name: Coverity Scan

on:
  push:
  pull_request:

env:
  PROJECT_NAME: cFS-JSF-Rules
  CONTACT_EMAIL: ariel.s.adams@nasa.gov
  COVERITY_NAME: ArielSAdamsNASA-cFS-JSF-Rules
  COVERITY_PROJ: ArielSAdamsNASA%2FcFS-JSF-Rules

jobs:
  coverity:
    runs-on: ubuntu-latest
    steps:
       # Check out the cfs bundle
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
          
      - uses: actions/checkout@v2
      - name: Fetch latest Coverity Scan MD5
        id: var
        env:
          TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
        run: |
          wget -q https://scan.coverity.com/download/cxx/linux64         \
               --post-data "token=$TOKEN&project=${COVERITY_PROJ}&md5=1" \
               -O coverity-latest.tar.gz.md5
          export MD5=$(cat coverity-latest.tar.gz.md5)
          echo "Got MD5 $MD5"
          echo ::set-output name=md5::${MD5}
          
      - uses: actions/cache@v2
        id: cache
        with:
          path: coverity-latest.tar.gz
          key: ${{ runner.os }}-coverity-${{ steps.var.outputs.md5 }}
          restore-keys: |
            ${{ runner.os }}-coverity-${{ steps.var.outputs.md5 }}
            ${{ runner.os }}-coverity-
            ${{ runner.os }}-coverity
            
      - name: Download Coverity Scan
        env:
          TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
        run: |
          if [ ! -f coverity-latest.tar.gz ]; then
            wget -q https://scan.coverity.com/download/cxx/linux64   \
                 --post-data "token=$TOKEN&project=${COVERITY_PROJ}" \
                 -O coverity-latest.tar.gz
          else
            echo "Latest Coverity Scan available from cache :-)"
            md5sum coverity-latest.tar.gz
          fi
          mkdir coverity
          tar xzf coverity-latest.tar.gz --strip 1 -C coverity
  
      # Setup the build system
      - name: ls1
        run: ls   
        
      - name: Install dependencies
        run: |
          sudo apt-get -y update
          sudo apt-get -y install pkg-config libsystemd-dev libcap-dev
                
     # Setup the build system
      - name: Copy Files
        run: |
          cp ./cfe/cmake/Makefile.sample Makefile
          cp -r ./cfe/cmake/sample_defs sample_defs
      
      # Setup the build system
      - name: Make Prep
        run: make prep

      # Setup the build system
      - name: ls
        run: | 
          cd coverity/bin
          ls
        
      - name: Make
        run: ./coverity/bin/cov-build --dir cov-int make
        
        
      - name: Coverity BAC
        run: |
          rm -rf idir
          ./coverity/bin/cov-build --dir cov-int make
          ./coverity/bin/cov-analyze --dir idir --ticker-mode none --strip-path --all --webapp-security
          ./coverity/bin/cov-format-errors --dir idir --json-output-v7 coverity-results.json
          
      - name: Convert Coverity Results to SARIF
        uses: gautambaghel/coverity-scan-results-to-sarif@1.0.0
        with:
          pipeline-results-json: coverity-results.json
          output-results-sarif: coverity-results.sarif
        
      - name: Upload SARIF file to GitHub UI
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: coverity-results.sarif
          
      - name: Submit results to Coverity Scan
        env:
          TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
        run: |
          tar czvf ${PROJECT_NAME}.tgz cov-int
          curl \
            --form project=${COVERITY_NAME} \
            --form token=$TOKEN \
            --form email=${CONTACT_EMAIL} \
            --form file=@${PROJECT_NAME}.tgz \
            --form version=trunk \
            --form description="${PROJECT_NAME} $(git rev-parse HEAD)" \
            https://scan.coverity.com/builds?project=${COVERITY_PROJ}
            
      - name: Upload build.log
        uses: actions/upload-artifact@v2
        with:
          name: coverity-build.log
          path: cov-int/build-log.txt
