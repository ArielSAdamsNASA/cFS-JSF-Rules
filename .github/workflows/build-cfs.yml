name: Build, Test, and Run [OMIT_DEPRECATED=true]

# Run every time a new commit pushed or for pull requests
on:
  push:
  pull_request:

env:
  SIMULATION: native
  OMIT_DEPRECATED: true

jobs:
  #Checks for duplicate actions. Skips push actions if there is a matching or duplicate pull-request action. 
  check-for-duplicates:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
        should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: 'same_content'
          skip_after_successful_duplicate: 'true'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'
          
  prep-env:
    name: Prepare Environment
    #Continue if check-for-duplicates found no duplicates. Always runs for pull-requests.
    needs: check-for-duplicates
    runs-on: ubuntu-18.04

    steps:
      - name: Cache Source and proto-build
        id: cache-src-proto-bld
        uses: actions/cache@v2
        with:
          path: /home/runner/work/cFS-JSF-Rules/cFS-JSF-Rules/*
          key: proto-build-${{ github.run_number }}  
          
      - name: Checkout cFS
        if: steps.cache-src-proto-bld.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          submodules: true
          
      - name: Copy Makefile
        run: |
          cp ./cfe/cmake/Makefile.sample Makefile
          cp -r ./cfe/cmake/sample_defs sample_defs

      - name: Prep Build
        run: make prep 
          
  build-cfs:
    name: Build
    needs: prep-env
    runs-on: ubuntu-18.04

    strategy:
      fail-fast: false
      matrix:
        buildtype: [debug, release]

    # Set the type of machine to run on
    env:
      BUILDTYPE: ${{ matrix.buildtype }}

    steps:
      - name: Cache Source and proto-build
        id: cache-src-proto-bld
        uses: actions/cache@v2
        with:
          path: /home/runner/work/cFS-JSF-Rules/cFS-JSF-Rules/*
          key: proto-build-${{ github.run_number }}
          
      - name: Make
        run: make
        
  test-cfs:
    name: Test
    needs: prep-env
    runs-on: ubuntu-18.04

    strategy:
      fail-fast: false
      matrix:
        buildtype: [debug, release]

    # Set the type of machine to run on
    env:
      BUILDTYPE: ${{ matrix.buildtype }}
      ENABLE_UNIT_TESTS: true

    steps:
      - name: Install Dependencies
        run: sudo apt-get install lcov -y
        
      - name: Cache Source and proto-build
        id: cache-src-proto-bld
        uses: actions/cache@v2
        with:
          path: /home/runner/work/cFS-JSF-Rules/cFS-JSF-Rules/*
          key: proto-build-${{ github.run_number }}
              
      - name: Prep test
        run: make prep
       
      # Setup the build system
      - name: Make
        run: make

      - name: Run Tests
        run: make test

      - name: Check Coverage
        run: make lcov

  run-cfs:
    name: Run
    needs: prep-env
    runs-on: ubuntu-18.04

    strategy:
      fail-fast: false
      matrix:
        buildtype: [debug, release]

    # Set the type of machine to run on
    env:
      BUILDTYPE: ${{ matrix.buildtype }}

    steps:
      - name: Cache Source and proto-build
        id: cache-src-proto-bld
        uses: actions/cache@v2
        with:
          path: /home/runner/work/cFS-JSF-Rules/cFS-JSF-Rules/*
          key: proto-build-${{ github.run_number }}

      # Setup the build system
      - name: Make Install
        run: make install

      - name: List cpu1
        run: ls build/exe/cpu1/

      - name: Run cFS
        run: |
          ./core-cpu1 > cFS_startup_cpu1.txt &
          sleep 30
          ../host/cmdUtil --endian=LE --pktid=0x1806 --cmdcode=2 --half=0x0002
        working-directory: ./build/exe/cpu1/

      - name: Archive cFS Startup Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: cFS-startup-log-deprecate-true-${{ matrix.buildtype }}
          path: ./build/exe/cpu1/cFS_startup_cpu1.txt

      - name: Check for cFS Warnings
        run: |
          if [[ -n $(grep -i "warn\|err\|fail" cFS_startup_cpu1.txt) ]]; then
                  echo "Must resolve warn|err|fail in cFS startup before submitting a pull request"
                  echo ""
                  grep -i 'warn\|err\|fail' cFS_startup_cpu1.txt
                  exit -1
          fi
        working-directory: ./build/exe/cpu1/
